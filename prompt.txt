**Prompt:**

Build me a full React blackjack training app with the following requirements:

- **Gameplay scope:** Only soft hands, hard hands, and pair splits (configurable by user in a Settings panel).
- **Settings:** A gear icon opens a menu where the user can toggle which initial hand types (hard / soft / pairs) are allowed. “Pairs” must exclude all 10-value combinations (10, J, Q, K in any combination).
- **Rules:**
  - Supports betting, auto-deal, double down (DAS allowed).
  - Split Aces get only one card each.
  - Blackjack pays 3:2 automatically.
  - Dealer’s hole card is hidden until their turn, then revealed with a short pause before the dealer plays.
  - Dealer stands on soft 17 (S17), no surrender.
- **UI/UX:**
  - Player bankroll updates with clear visual indication of changes.
  - Sound effects for dealing, flipping, winning.
  - Smooth animations for dealing and flipping cards.
  - Use card and chip graphics (not plain text).
- **Strategy training:** After each move, indicate if the action was correct/incorrect based on basic strategy (S17, no surrender, DAS allowed). Strategy rules:
  - **Pairs:** Split A,A and 8,8 always. 10-value pairs → Stand. 9,9 split vs 2–9 except 7. 7,7 split vs 2–7. 6,6 split vs 2–6. 4,4 split vs 5–6. 3,3 & 2,2 split vs 2–7. Otherwise hit.
  - **Soft hands:** A2–A3 double vs 5–6 else hit. A4–A5 double vs 4–6 else hit. A6 double vs 3–6 else hit. A7 double vs 3–6; stand vs 2,7,8; hit vs 9,10,A. A8+ stand.
  - **Hard hands:** 17+ stand. 13–16 stand vs 2–6 else hit. 12 stand vs 4–6 else hit. 11 double vs any. 10 double vs 2–9 else hit. 9 double vs 3–6 else hit. 8 or less hit.
- **Testing:** Include test cases for `handTotal`, classification (hard/soft/pairs), and win/loss resolution logic. Confirm that dealer totals and win/loss messages match actual card arrays (e.g., dealer K+6+5 = 21 both visually and in outcome).
- **Libraries & tools:**
  - React with Tailwind for styling.
  - `lucide-react` for icons (gear, sound, shuffle, etc.).
  - Framer Motion for animations.
  - Use componentized design (card rendering, chips, header with controls).

Deliver the full code in a single file exportable React component (`BlackjackTrainer`).
